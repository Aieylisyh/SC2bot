from sc2.bot_ai import BotAI, Race
from sc2.data import Race, Difficulty
from sc2.player import Bot, Computer
from sc2.position import Point2
from sc2.unit import Unit
from sc2.units import Units
from sc2.ids.unit_typeid import UnitTypeId
from sc2.constants import *
from sc2.ids.ability_id import AbilityId
from sc2 import maps
from sc2.bot_ai import BotAI
from sc2.ids.buff_id import BuffId
from bot.BotSubModule.Mission.MissionPrototypes.MissionPrototype import MissionPrototype
import asyncio
import enum
from bot.BotSubModule.bot_mainStrategy import bot_mainStrategy
from bot.BotSubModule.bot_tactics import bot_tactics
from bot.BotSubModule.bot_unitSelection import bot_unitSelection

# DO NOT EDIT!
# This file was automatically generated by "generate_ids.py"


class MissionState(enum.Enum):
    Null = 0  # not in game
    Pending = 1  # prepare
    Doing = 2  # current
    Done = 3  # finished
    # discarded?

    def __repr__(self):
        return f"MissionState.{self.name}"


class MissionInstance:
    state: MissionState = MissionState.Null
    id: str = ""
    proto: MissionPrototype
    layer: int
    piority: int = 1

    # triggers if score>100
    # if this is in pending list, this decide whether to start this
    # if this is in current list, this decide whether to pending another mission of this kind
    positiveScore: int = 0
    # triggers if score>100
    # if this is in pending list, this decide whether to discard this
    # if this is in current list, this decide whether to end this
    negativeScore: int = 0

    # targetUnit: Unit
    # targetPosition: Point2
    # targetUnits: Units
    # targetDuration: float
    # targetAmount: int
    # startIteraction: int
    mainStrategy: bot_mainStrategy
    tactics: bot_tactics
    unitSelection: bot_unitSelection

    def __init__(self, bot: BotAI, mp: MissionPrototype):
        self.bot = bot
        self.proto = mp
        self.Initialize()

    def Initialize(self):
        self.id = self.proto.id
        self.unitSelection = bot_unitSelection(self.bot)
        self.tactics = bot_tactics(self.bot)
        self.mainStrategy = bot_mainStrategy(self.bot)
        # print("mission instance " + str(self.proto))

    def CheckState(self) -> MissionState:
        if self.state == MissionState.Pending:
            self.CheckStartMission()
        if self.state == MissionState.Doing:
            self.CheckEndMission()
            self.CheckAppendMission()
        return self.state

    async def Do(self):
        if self.proto.doDesc == "sneakily kill appropriate units, prefer workers":
            await self.AdeptRush()

    def CheckStartMission(self):
        bot = self.bot
        if self.proto.startCondition == "once only, we have 2 adept":
            myForces = bot.units(UnitTypeId.ADEPT).ready
            if myForces.amount >= 2:
                self.positiveScore = 100
                self.state = MissionState.Doing
                return

    def CheckAppendMission(self):
        print("TODO")

    def CheckEndMission(self):
        print("TODO")

    async def AdeptRush(self):
        bot = self.bot
        if bot.startingGame_rusherRushed:
            return
        myForces = self.unitSelection.GetUnits(False).ready
        myForces = myForces.filter(lambda unit: unit.type_id == UnitTypeId.ADEPT)

        targetPos = bot.enemy_start_locations[0].position

        for f in myForces:
            abilities = await self.bot.get_available_abilities(f)
            if AbilityId.ADEPTPHASESHIFT_ADEPTPHASESHIFT in abilities:
                f(
                    AbilityId.ADEPTPHASESHIFT_ADEPTPHASESHIFT,
                    target=targetPos,
                    queue=False,
                )
            if f.can_attack:
                f.attack(targetPos)
        print("AdeptRush!")
        await bot.chat_send("AdeptRush!")
        bot.startingGame_rusherRushed = True
